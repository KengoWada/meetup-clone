package utils

import (
	"crypto/rand"
	"crypto/subtle"
	"encoding/base64"
	"errors"
	"fmt"
	"strings"

	"golang.org/x/crypto/argon2"
)

const (
	Memory      uint32 = 64 * 1024
	Iterations  uint32 = 5
	Parallelism uint8  = 2
	SaltLength  uint32 = 16
	KeyLength   uint32 = 32
)

var (
	ErrInvalidHash         = errors.New("the encoded hash is not in the correct format")
	ErrIncompatibleVersion = errors.New("incompatible version of argon2")
)

type argon2Params struct {
	memory      uint32
	iterations  uint32
	parallelism uint8
	saltLength  uint32
	keyLength   uint32
}

// GeneratePasswordHash generates a hashed password using the Argon2 algorithm.
// It takes the provided password string, hashes it using Argon2, and returns
// the hashed password as a string. If there is an error during hashing, it returns
// an error.
//
// Parameters:
//   - password: The plain-text password to be hashed.
//
// Returns:
//   - A string containing the hashed password.
//   - An error if the hashing process fails.
//
// Note:
//   - Argon2 is a memory-hard hashing algorithm that is resistant to GPU-based
//     and brute-force attacks. It is highly recommended for securely storing
//     passwords.
func GeneratePasswordHash(password string) (string, error) {
	salt, err := generateRandomBytes(SaltLength)
	if err != nil {
		return "", err
	}

	hash := argon2.IDKey([]byte(password), salt, Iterations, Memory, Parallelism, KeyLength)

	b64Salt := base64.RawStdEncoding.EncodeToString(salt)
	b64Hash := base64.RawStdEncoding.EncodeToString(hash)

	encodedHash := fmt.Sprintf(
		"$argon2id$v=%d$m=%d,t=%d,p=%d$%s$%s",
		argon2.Version,
		Memory,
		Iterations,
		Parallelism,
		b64Salt,
		b64Hash,
	)

	return encodedHash, nil
}

// ComparePasswordAndHash compares a plain-text password with an encoded hash
// using the Argon2 algorithm. It returns true if the password matches the
// hash, and false otherwise. If there is an error during comparison,
// it returns the error.
//
// Parameters:
//   - password: The plain-text password to compare with the hash.
//   - encodedHash: The encoded password hash to compare against.
//
// Returns:
//   - A boolean indicating whether the password matches the hash (true if match, false if not).
//   - An error if the comparison process fails.
//
// Note:
//   - This function safely compares the password against the hash using Argon2's
//     constant-time comparison to mitigate timing attacks.
func ComparePasswordAndHash(password, encodedHash string) (bool, error) {
	p, salt, hash, err := decodeHash(encodedHash)
	if err != nil {
		return false, err
	}

	otherHash := argon2.IDKey([]byte(password), salt, p.iterations, p.memory, p.parallelism, p.keyLength)

	if subtle.ConstantTimeCompare(hash, otherHash) != 1 {
		return false, nil
	}

	return true, nil
}

// generateRandomBytes generates a slice of cryptographically secure random bytes
// using the crypto/rand package. The generated bytes can be used as a salt for password hashing.
//
// Parameters:
//   - n: The number of random bytes to generate.
//
// Returns:
//   - A slice of random bytes.
//   - An error if the random byte generation fails.
//
// Note:
//   - The generated bytes are suitable for use as a salt in password hashing algorithms
//     such as Argon2, ensuring enhanced security by adding randomness to the hash.
func generateRandomBytes(n uint32) ([]byte, error) {
	b := make([]byte, n)
	_, err := rand.Read(b)
	if err != nil {
		return nil, err
	}

	return b, nil
}

// decodeHash decodes an encoded Argon2 hash string and extracts the Argon2 parameters,
// the salt, and the hash used in its generation.
//
// Parameters:
//   - encodedHash: The encoded Argon2 hash string to decode.
//
// Returns:
//   - p: The Argon2 parameters used for hashing.
//   - salt: The salt used in the hash generation process.
//   - hash: The resulting hash value from the password hashing.
//   - err: An error if decoding fails or if the encoded hash is invalid.
//
// Note:
//   - This function is used to extract the components of an Argon2 hash so they can
//     be compared with the password and salt during authentication.
func decodeHash(encodedHash string) (p *argon2Params, salt, hash []byte, err error) {
	vals := strings.Split(encodedHash, "$")
	if len(vals) != 6 {
		return nil, nil, nil, ErrInvalidHash
	}

	var version int
	_, err = fmt.Sscanf(vals[2], "v=%d", &version)
	if err != nil {
		return nil, nil, nil, err
	}
	if version != argon2.Version {
		return nil, nil, nil, ErrIncompatibleVersion
	}

	p = &argon2Params{}
	_, err = fmt.Sscanf(vals[3], "m=%d,t=%d,p=%d", &p.memory, &p.iterations, &p.parallelism)
	if err != nil {
		return nil, nil, nil, err
	}

	salt, err = base64.RawStdEncoding.Strict().DecodeString(vals[4])
	if err != nil {
		return nil, nil, nil, err
	}
	p.saltLength = uint32(len(salt))

	hash, err = base64.RawStdEncoding.Strict().DecodeString(vals[5])
	if err != nil {
		return nil, nil, nil, err
	}
	p.keyLength = uint32(len(hash))

	return p, salt, hash, nil
}
